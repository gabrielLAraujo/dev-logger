generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  Commit        Commit[]
  Project       Project[]
  sessions      Session[]
  UserSettings  UserSettings?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Commit {
  id         String   @id @default(cuid())
  hash       String
  message    String
  repository String
  createdAt  DateTime @default(now())
  userId     String
  url        String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([hash, repository])
}

model Log {
  id        String   @id @default(cuid())
  content   String
  type      String   @default("INFO")
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Project {
  id           String         @id @default(cuid())
  name         String
  description  String?
  status       String         @default("active")
  userId       String
  repositories String[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  WorkSchedule WorkSchedule[]
  logs         Log[]
}

model UserSettings {
  id                String   @id @default(cuid())
  userId            String   @unique
  workStartTime     String   @default("09:00")
  workEndTime       String   @default("18:00")
  workDays          String[] @default(["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY"])
  monitoredRepos    String[] @default([])
  githubAccessToken String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WorkSchedule {
  id        String   @id @default(cuid())
  projectId String
  dayOfWeek Int
  startTime String
  endTime   String
  isWorkDay Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, dayOfWeek])
}
